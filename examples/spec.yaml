# specify RDF prefixes used in this document
prefixes:
  - ex: <https://example.org/>
  - pid: <https://example.org/pid/>
  - agent: <https://example.org/agent/>
  - genre: <https://example.org/genre/>
  - schema: <https://schema.org/>
  - xsd: <http://www.w3.org/2001/XMLSchema#>

# [ required ]
# the CSV file to process interpreted as an absolute path
# or a path relative to this file.
infile: data.csv

# An optional directory for the output, defaults to the same
# directory as {infile}
outdir: ./

# An optional named graph to use for the generated RDF.
# If given the output format will be .trig otherwise .ttl
graph: ex:graph

# [ required ]
# Name of column with the unique identifiers for each row
identifier: id

# A namespace to use when minting IRIs for the {identifier}.
# if not given then {identifier} will be assumed to already
# be a valid IRI.
namespace: <https://example.org/pid/>

# classes to assign to each resource, can have as many as you want.
types:
  - schema:CreativeWork
  - ex:Resource

# An optional mapping of properties for each column
# available properties and their default values are as follows
#
# columns:
#   - column: ...                   # [ required ] name of the column
#     predicate: ...                # [ required ] predicate to use in RDF
#     datatype: xsd:string          #              datatype of the column data
#     datestr: null                 #              a python date format string specifying the structure of the date(time) values in the column, if ommitted then date(time)s will be assumed to be in ISO format
#     separator: null               #              a separator used to delineate multiple values per cell
#     regex: false                  #              set true to allow regex patterns in the separator string.
#     as_iri: false                 #              if the value should be treated as an iri set this to True
#     namespace: ...                #              a namespace to use for the IRI. Only used if {as_iri} = true and the values for this column are not already IRIs
#     as_uuid: false                #              if true, create a UUID for the IRI instead of just using the values from the column. Only used if {as_iri} = true.
#     ignore_case: false            #              if true, apply a lowercase transformation on the column values before minting the UUID. Only used if {as_iri} = true.
#     label: ...                    #              if given, declare a label for the minted IRI using this predicate.
#     type: ...                     #              if given, declare the minted IRI as an instance of this class.

columns:
  - column: headline
    predicate: schema:headline

  - column: author
    predicate: schema:author
    as_iri: true
    namespace: <https://example.org/agent/>

  - column: date published
    predicate: schema:datePublished
    datatype: xsd:date

  - column: date_created
    predicate: schema:dateCreated
    datatype: xsd:dateTime
    datestr: "%d/%m/%Y %H:%M"

  - column: keywords
    predicate: schema:keywords
    datatype: xsd:string
    separator: "||"

  - column: category
    predicate: schema:genre
    as_iri: true
    as_uuid: true
    ignore_case: true
    namespace: <https://example.org/genre/>
    label: schema:name
    type: schema:Text

  - column: reviewer
    predicate: ex:reviewer
    separator: '(?<=[a-z]),'
    regex: true

# An optional template to be evaluated for each row of the data.
#
# The template must
#    - be in turtle format
#    - be valid RDF after the variable substitutions.
#
# The template can
#    - contain placeholders like {id} or {author}, where each placeholder
#      is the name of a column in the source data.
#    - use prefixes declared in the prefixes: section
#
template: |
  <https://example.org/pid/{id}> schema:comment "converted from csv using rdfcon"^^xsd:string .
  <https://example.org/agent/{author}> schema:name "{author_name}"^^xsd:string .
