name: PR Checks

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
    branches:
      - main
  workflow_dispatch:

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: true
      - run: echo "${{ github.event.pull_request.title }}" | pnpm commitlint

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - run: uv sync
      - run: uv run pytest

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - run: uv sync
      - run: uv run black rdfcon
      - run: uv run isort rdfcon
      - run: uv run ruff check rdfcon
      - run: uv run black tests
      - run: uv run isort tests
      - run: uv run ruff check tests

  check_version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: true
      - run: |
          pnpm semantic-release --dry-run --no-ci --branches "main,refs/*"
          exit 1
          next_version="$(pnpm semantic-release --dry-run | grep "The next release version is" | awk '{print $NF}')"
          echo "::info:: next version is '$next_version'"
          if [ -z "$next_version" ]; then
            exit 0
          fi
          uv sync
          pyproj_version="$(grep -E '^version = "[0-9]+\.[0-9]+\.[0-9]"$' pyproject.toml | awk -F '"' '{print $2}')"
          uv_lock_version="$(uv pip list | awk '/rdfcon/ {print $2}')"
          if [ "$pyproj_version" != "$next_version" ]; then
            echo "::error::pyproject.toml version does not match the expected version for the next release."
            echo "::error::Next version is '$next_version' pyproject.toml version is '$pyproj_version'"
            exit 1
          fi
          if [ "$uv_lock_version" != "$next_version" ]; then
            echo "::error::The rdfcon version in uv.lock does not match the expected version for the next release run uv sync to fix."
            echo "::error::Next version is '$next_version' uv.lock version is '$pyproj_version'"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
